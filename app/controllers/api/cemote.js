// Generated by CoffeeScript 2.3.0
(function() {
  var controller, request,
    indexOf = [].indexOf;

  request = require('request');

  controller = {};

  controller.index = function(req, res) {
    var cmd, parts, ref, text;
    if (!req.body || !req.body.text) {
      return res._cc.fail("Text must be provided.", 400);
    }
    if (ref = req.body.token, indexOf.call(req.app.get('config').tokens, ref) < 0) {
      console.log(req.body.token);
      return res._cc.fail("Unauthorized token.", 401);
    }
    text = req.body.text;
    parts = text.split(' ');
    cmd = parts[0];
    switch (cmd) {
      case '/help':
        return controller.help(req, res);
      case '/list':
        return controller.list(req, res);
      case '/search':
        return controller.search(req, res);
      case '/test':
        parts.shift();
        req.body.text = parts.join(' ');
        req.body.test = true;
        return controller.emote(req, res);
      default:
        return controller.emote(req, res);
    }
  };

  controller.emote = function(req, res) {
    var action, cmd, data, optional, parts, ref, ref1, ref2, ref3, target, text;
    data = req.app.get('config').data;
    if (!req.body || !req.body.text) {
      return res._cc.fail("Text must be provided.", 400);
    }
    if (ref = req.body.token, indexOf.call(req.app.get('config').tokens, ref) < 0) {
      console.log(req.body.token);
      return res._cc.fail("Unauthorized token.", 401);
    }
    text = req.body.text;
    parts = text.split(' ');
    cmd = parts[0];
    target = (ref1 = parts[1]) != null ? ref1 : '';
    optional = parts[2] ? parts.slice(2).join(' ') : '';
    if (!data[cmd]) {
      return res.json({
        text: "Emote \"" + cmd + "\" cannot be found."
      });
    }
    if (target === '') {
      action = 0; // Act on all surroundings with no option
    } else if (target === 'me') {
      if (optional === '') {
        action = 2; // Act on self with no option
      } else {
        action = 3; // Act on self with option
      }
    } else if (target.substr(0, 1) === '@' || target.substr(0, 2) === '<@') {
      if (optional === '') {
        action = 4; // Act on target with no option
      } else {
        action = 5; // act on target with option
      }
    } else {
      target = '';
      optional = parts.slice(1).join(' ');
      action = 1; // Act on all surroundings with option
    }
    
    // First replace self user name
    text = data[cmd][action].replace(new RegExp('{{ user }}', 'g'), '<@' + ((ref2 = req.body.user_id) != null ? ref2 : '') + '|' + ((ref3 = req.body.user_name) != null ? ref3 : '') + '>');
    // Next replace target user name
    text = text.replace(new RegExp('{{ target }}', 'g'), target);
    // Last replace optionalÂ¨
    text = text.replace(new RegExp('{{ optional }}', 'g'), optional);
    request.post(req.body.response_url, {
      json: {
        response_type: req.body.test ? "ephemeral" : "in_channel",
        text: text
      }
    }, function(error, response, body) {});
    return res.send('');
  };

  controller.help = function(req, res) {
    return res.json({
      text: "No help right now."
    });
  };

  controller.list = function(req, res) {
    var data, matches, ref, text;
    data = req.app.get('config').data;
    if (ref = req.body.token, indexOf.call(req.app.get('config').tokens, ref) < 0) {
      console.log(req.body.token);
      return res._cc.fail("Unauthorized token.", 401);
    }
    matches = Object.keys(data);
    text = matches.length + ' available.\n' + matches.join(' ');
    request.post(req.body.response_url, {
      json: {
        response_type: "ephemeral",
        text: text
      }
    }, function(error, response, body) {});
    return res.send('');
  };

  controller.search = function(req, res) {
    var data, i, key, len, line, lines, matches, parts, searchText, text;
    data = req.app.get('config').data;
    text = req.body.text;
    parts = text.split(' ');
    searchText = parts[1];
    matches = [];
    for (key in data) {
      lines = data[key];
      if (key.includes(searchText)) {
        matches.push(key);
        continue;
      }
      for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        if (line.includes(searchText)) {
          matches.push(key);
          break;
        }
      }
    }
    text = 'Matches ' + matches.length + ' results.\n' + matches.join(' ');
    request.post(req.body.response_url, {
      json: {
        response_type: "ephemeral",
        text: text
      }
    }, function(error, response, body) {});
    return res.send('');
  };

  module.exports = controller;

}).call(this);
